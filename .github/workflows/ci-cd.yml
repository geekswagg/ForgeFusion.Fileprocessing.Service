name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Test
      run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Publish API
      run: dotnet publish ForgeFusion.Fileprocessing.Api/ForgeFusion.Fileprocessing.Api.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output ./publish/api
      
    - name: Publish Web
      run: dotnet publish ForgeFusion.Fileprocessing.Web/ForgeFusion.Fileprocessing.Web.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output ./publish/web
      
    - name: Upload API artifact
      uses: actions/upload-artifact@v3
      with:
        name: api-package
        path: ./publish/api/
        
    - name: Upload Web artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-package
        path: ./publish/web/

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for Web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Download API artifact
      uses: actions/download-artifact@v3
      with:
        name: api-package
        path: ./api
        
    - name: Download Web artifact
      uses: actions/download-artifact@v3
      with:
        name: web-package
        path: ./web
        
    - name: Deploy API to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.DEV_API_APP_NAME }}
        publish-profile: ${{ secrets.DEV_API_PUBLISH_PROFILE }}
        package: ./api
        
    - name: Deploy Web to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.DEV_WEB_APP_NAME }}
        publish-profile: ${{ secrets.DEV_WEB_PUBLISH_PROFILE }}
        package: ./web

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download API artifact
      uses: actions/download-artifact@v3
      with:
        name: api-package
        path: ./api
        
    - name: Download Web artifact
      uses: actions/download-artifact@v3
      with:
        name: web-package
        path: ./web
        
    - name: Deploy API to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.PROD_API_APP_NAME }}
        publish-profile: ${{ secrets.PROD_API_PUBLISH_PROFILE }}
        package: ./api
        
    - name: Deploy Web to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.PROD_WEB_APP_NAME }}
        publish-profile: ${{ secrets.PROD_WEB_PUBLISH_PROFILE }}
        package: ./web
        
    - name: Warm up applications
      run: |
        echo "Warming up API..."
        curl -f "https://${{ secrets.PROD_API_APP_NAME }}.azurewebsites.net/api/files" || echo "API warmup failed"
        
        echo "Warming up Web..."
        curl -f "https://${{ secrets.PROD_WEB_APP_NAME }}.azurewebsites.net" || echo "Web warmup failed"
        
        echo "Applications warmed up successfully"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'